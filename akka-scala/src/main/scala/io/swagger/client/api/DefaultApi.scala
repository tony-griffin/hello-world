/**
 * MaT Service
 * Manage A Tenancy
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.api

import io.swagger.client.model.Error
import io.swagger.client.model.Task
import io.swagger.client.model.Tasklist
import io.swagger.client.core._
import io.swagger.client.core.CollectionFormats._
import io.swagger.client.core.ApiKeyLocations._

object DefaultApi {

  /**
   * 
   * 
   * Expected answers:
   *   code 200 :  (Successful operation)
   */
  def areasGet(): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.GET, "https://localhost", "/areas", "application/json")
      .withSuccessResponse[Unit](200)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 :  (Successful operation)
   * 
   * @param id The area id
   */
  def areasIdGet(id: String): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.GET, "https://localhost", "/areas/{id}", "application/json")
      .withPathParam("id", id)
      .withSuccessResponse[Unit](200)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 :  (Successful operation)
   */
  def healthcheckGet(): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.GET, "https://localhost", "/healthcheck", "application/json")
      .withSuccessResponse[Unit](200)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 :  (Successful operation)
   */
  def patchesGet(): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.GET, "https://localhost", "/patches", "application/json")
      .withSuccessResponse[Unit](200)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 :  (Successful operation)
   * 
   * @param id The patch id
   */
  def patchesIdDelete(id: String): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.DELETE, "https://localhost", "/patches/{id}", "application/json")
      .withPathParam("id", id)
      .withSuccessResponse[Unit](200)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 :  (Successful operation)
   * 
   * @param id The patch id
   */
  def patchesIdGet(id: String): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.GET, "https://localhost", "/patches/{id}", "application/json")
      .withPathParam("id", id)
      .withSuccessResponse[Unit](200)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 :  (Successful operation)
   * 
   * @param id The patch id
   */
  def patchesIdPut(id: String): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.PUT, "https://localhost", "/patches/{id}", "application/json")
      .withPathParam("id", id)
      .withSuccessResponse[Unit](200)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 :  (Successful operation)
   */
  def patchesPost(): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "https://localhost", "/patches", "application/json")
      .withSuccessResponse[Unit](200)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 :  (Successful operation)
   */
  def schedulerGet(): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.GET, "https://localhost", "/scheduler", "application/json")
      .withSuccessResponse[Unit](200)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 :  (Successful operation)
   */
  def schedulerItvPost(): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "https://localhost", "/scheduler/itv", "application/json")
      .withSuccessResponse[Unit](200)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 : Tasklist (Successful operation)
   *   code 401 : Error (Unauthenticated)
   *   code 500 : Error (There was an error processing your request.)
   */
  def tasksGet(): ApiRequest[Tasklist] =
    ApiRequest[Tasklist](ApiMethods.GET, "https://localhost", "/tasks", "application/json")
      .withSuccessResponse[Tasklist](200)
      .withErrorResponse[Error](401)
      .withErrorResponse[Error](500)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 : Task (Successful operation)
   *   code 401 : Error (Unauthenticated)
   *   code 500 : Error (There was an error processing your request.)
   * 
   * @param id The task id
   */
  def tasksIdGet(id: String): ApiRequest[Task] =
    ApiRequest[Task](ApiMethods.GET, "https://localhost", "/tasks/{id}", "application/json")
      .withPathParam("id", id)
      .withSuccessResponse[Task](200)
      .withErrorResponse[Error](401)
      .withErrorResponse[Error](500)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 :  (Successful operation)
   * 
   * @param id The task id
   */
  def tasksIdPut(id: String): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.PUT, "https://localhost", "/tasks/{id}", "application/json")
      .withPathParam("id", id)
      .withSuccessResponse[Unit](200)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 :  (Successful operation)
   */
  def tasksPost(): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "https://localhost", "/tasks", "application/json")
      .withSuccessResponse[Unit](200)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 :  (Successful operation)
   */
  def trasGet(): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.GET, "https://localhost", "/tras", "application/json")
      .withSuccessResponse[Unit](200)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 :  (Successful operation)
   * 
   * @param id The TRA id
   */
  def trasIdDelete(id: String): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.DELETE, "https://localhost", "/tras/{id}", "application/json")
      .withPathParam("id", id)
      .withSuccessResponse[Unit](200)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 :  (Successful operation)
   * 
   * @param id The TRA id
   */
  def trasIdGet(id: String): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.GET, "https://localhost", "/tras/{id}", "application/json")
      .withPathParam("id", id)
      .withSuccessResponse[Unit](200)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 :  (Successful operation)
   * 
   * @param id The TRA id
   */
  def trasIdMeetingGet(id: String): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.GET, "https://localhost", "/tras/{id}/meeting", "application/json")
      .withPathParam("id", id)
      .withSuccessResponse[Unit](200)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 :  (Successful operation)
   * 
   * @param id The TRA id
   */
  def trasIdMeetingPost(id: String): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "https://localhost", "/tras/{id}/meeting", "application/json")
      .withPathParam("id", id)
      .withSuccessResponse[Unit](200)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 :  (Successful operation)
   * 
   * @param id The TRA id
   */
  def trasIdPut(id: String): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.PUT, "https://localhost", "/tras/{id}", "application/json")
      .withPathParam("id", id)
      .withSuccessResponse[Unit](200)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 :  (Successful operation)
   */
  def trasPost(): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "https://localhost", "/tras", "application/json")
      .withSuccessResponse[Unit](200)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 :  (Successful operation)
   * 
   * @param traId The TRA id
   * @param meetingId The meeting id
   */
  def trasTraIdMeetingMeetingIdGet(traId: String, meetingId: String): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.GET, "https://localhost", "/tras/{tra-id}/meeting/{meeting-id}", "application/json")
      .withPathParam("tra-id", traId)
      .withPathParam("meeting-id", meetingId)
      .withSuccessResponse[Unit](200)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 :  (Successful operation)
   * 
   * @param traId The TRA id
   * @param meetingId The meeting id
   */
  def trasTraIdMeetingMeetingIdIssueGet(traId: String, meetingId: String): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.GET, "https://localhost", "/tras/{tra-id}/meeting/{meeting-id}/issue", "application/json")
      .withPathParam("tra-id", traId)
      .withPathParam("meeting-id", meetingId)
      .withSuccessResponse[Unit](200)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 :  (Successful operation)
   * 
   * @param traId The TRA id
   * @param meetingId The meeting id
   */
  def trasTraIdMeetingMeetingIdIssuePost(traId: String, meetingId: String): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "https://localhost", "/tras/{tra-id}/meeting/{meeting-id}/issue", "application/json")
      .withPathParam("tra-id", traId)
      .withPathParam("meeting-id", meetingId)
      .withSuccessResponse[Unit](200)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 :  (Successful operation)
   * 
   * @param traId The TRA id
   * @param meetingId The meeting id
   */
  def trasTraIdMeetingMeetingIdPut(traId: String, meetingId: String): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.PUT, "https://localhost", "/tras/{tra-id}/meeting/{meeting-id}", "application/json")
      .withPathParam("tra-id", traId)
      .withPathParam("meeting-id", meetingId)
      .withSuccessResponse[Unit](200)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 :  (Successful operation)
   * 
   * @param traId The TRA id
   * @param meetingId The meeting id
   * @param issueId The issue id
   */
  def trasTraIdmeetingMeetingIdIssueIssueIdGet(traId: String, meetingId: String, issueId: String): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.GET, "https://localhost", "/tras/{tra-id}meeting/{meeting-id}/issue/{issue-id}", "application/json")
      .withPathParam("tra-id", traId)
      .withPathParam("meeting-id", meetingId)
      .withPathParam("issue-id", issueId)
      .withSuccessResponse[Unit](200)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 :  (Successful operation)
   * 
   * @param traId The TRA id
   * @param meetingId The meeting id
   * @param issueId The issue id
   */
  def trasTraIdmeetingMeetingIdIssueIssueIdPut(traId: String, meetingId: String, issueId: String): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.PUT, "https://localhost", "/tras/{tra-id}meeting/{meeting-id}/issue/{issue-id}", "application/json")
      .withPathParam("tra-id", traId)
      .withPathParam("meeting-id", meetingId)
      .withPathParam("issue-id", issueId)
      .withSuccessResponse[Unit](200)
      

}

